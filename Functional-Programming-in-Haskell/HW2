-- Alex McKee
-- CptS 355 - Fall 2019 Assignment 2
-- Please include your name and the names of the students with whom you discussed any of the problems in this homework


module HW2
     where


{- 1-  merge2 & merge2Tail & mergeN - 22% -}
--merge2
merge2 :: Ord a => [a] -> [a] -> [a]
--Examples:
-- > merge2 [2,5,6,8,9] [1,3,4,5,7,8,10]
-- [1,2,3,4,5,5,6,7,8,8,9,10]

merge2 [] l2 = l2
merge2 l1 [] = l1
merge2 (x:xs) (y:ys) | x < y = x: merge2 xs (y:ys)
                     | otherwise = y : merge2 (x:xs) ys

--merge2Tail

merge2Tail :: Ord a => [a] -> [a] -> [a]

merge2Tail l1 [] = l1
merge2Tail [] l2 = l2
merge2Tail (x:xs) (y:ys) = let

                            revAppend [] acc = acc
                            revAppend (x:xs) acc = revAppend xs (x:acc)

                           -- merge2TailHelper [] [] acc = revAppend acc [] 
                            merge2TailHelper [] (y:ys) acc = revAppend (y:ys) acc
                            merge2TailHelper (x:xs) [] acc =  revAppend (x:xs) acc
                            merge2TailHelper (x:xs) (y:ys) acc | x < y = merge2TailHelper xs (y:ys) (x:acc)
                                                               | otherwise = merge2TailHelper (x:xs) ys (y:acc)
                             in  reverse (merge2TailHelper (x:xs) (y:ys) [])


--mergeN

mergeN :: (Foldable t, Ord a) => t [a] -> [a]

mergeN xLL = foldr merge2 [] xLL


{- 2 - getInRange & countInRange - 18% -}


--getInRange

getInRange :: Ord a => a -> a -> [a] -> [a]

getInRange x y iL =  let
     lowerCheck = x
     upperCheck = y
     lowerBound a = if a > lowerCheck then True else False
     upperBound b = if b < upperCheck then True else False

    in filter upperBound (filter lowerBound iL)


--countInRange 

countInRange :: Ord a => a -> a -> [[a]] -> Int

countInRange x y iL = let         

                        getInRangeHelper = getInRange x y
                        filteredLL = map getInRangeHelper iL

                        oneList = foldr (++) [] filteredLL

                       in  length (foldr (++) [] filteredLL) -- map getInRangeHelper iL -- map foldr (foldr getInRangeHelper [] iL)




{- 3 -  addLengths & addAllLengths - 18% -}

data LengthUnit =  INCH  Int | FOOT  Int | YARD  Int
                   deriving (Show, Read, Eq)

addLengths :: LengthUnit -> LengthUnit -> LengthUnit
 --following pattern converts to inches
 
addLengths (INCH y) (INCH x) = INCH (x + y)
 
addLengths (INCH y) (FOOT x) = INCH (y + (x * 12))

addLengths (INCH y) (YARD x) = INCH (y  + (x*36))
addLengths (FOOT y) (INCH x) = INCH ((y*12) + (x))
addLengths (FOOT y) (FOOT x) = INCH ((y+x) * 12)
addLengths (FOOT y) (YARD x) = INCH ((y*12) +  (x*36))
addLengths (YARD y) (INCH x) = INCH ((y*36) + (x))
addLengths (YARD y) (FOOT x) = INCH ((y+36) + (x*12))
addLengths (YARD y) (YARD x) = INCH ((x+y) * 36 )    


-- addAllLengths 

addAllLengths :: [[LengthUnit]] -> LengthUnit

addAllLengths xLL = let 
                         -- make many lists into oneList
                        oneList = foldr (++) [] xLL

                        -- convert for map
                        convert (INCH x) = INCH (x)
                        convert (FOOT x) = INCH (x * 12)
                        convert (YARD x) = INCH (x *36)

                        -- convert to inches
                        oneListInches = map convert oneList
                        
                        -- add for foldr
                        add (INCH x) (INCH y) = INCH (x+y)


                       --  addLengthHelper [] = INCH 0
                       --  addLengthHelper (x:xs) = x + addLengthHelper xs

                     in foldr add (INCH 0) oneListInches

{-4 - sumTree and createSumTree - 22%-}


data Tree a = LEAF a | NODE a  (Tree a)  (Tree a) 
              deriving (Show, Read, Eq)

              
 
--sumTree
sumTree :: Num p => Tree p -> p

sumTree (LEAF x) = x
sumTree (NODE a t1 t2) = (sumTree t1) + (sumTree t2)

--createSumTree
createSumTree :: Num a => Tree a -> Tree a



createSumTree (LEAF a) = LEAF a
createSumTree (NODE a t1 t2) = NODE (sumLeaf t1 + sumLeaf t2) (createSumTree t1) (createSumTree t2)
                                  where
                                   sumLeaf (LEAF x) = x
                                   sumLeaf (NODE a t1 t2) = sumLeaf t1 + sumLeaf t2




{-5 - foldListTree - 20%-}
data ListTree a = ListLEAF [a] | ListNODE [(ListTree a)]
                  deriving (Show, Read, Eq)
 
                  
foldListTree f base (ListLEAF x) = foldr f base x  -- returns the sum of the list if f is (+)
foldListTree f base (ListNODE lt) = foldr f base (map (foldListTree f base) lt)
               




{- 6- Create two tree values :  Tree Integer  and  listTree a ;  Both trees should have at least 3 levels. -}
